class q{baseUri;dataSource;username;password;rememberMeToken;sessionId;constructor(L,K="",X="",Y="",Z=""){if(this.baseUri=L,!this.baseUri.endsWith("/"))this.baseUri+="/";this.dataSource=this.baseUri+"API",this.username=K,this.password=X,this.rememberMeToken=Y,this.sessionId=Z}async apiCall(L,K={}){const X={SESSIONID:this.sessionId},Y=await fetch(this.dataSource+"/"+L,{method:"POST",headers:{Accept:"text/javascript"},body:JSON.stringify({...K,...X})});if(Y.ok)return Y.json();else throw new Error("API call failed")}async APILogin(){const L={username:this.username,password:this.password,token:this.rememberMeToken,rememberMe:!0},K=await this.apiCall("Core/Login",L);if(K.success===!0)this.rememberMeToken=K.rememberMeToken,this.sessionId=K.sessionID;return K}}class z extends q{constructor(L){super(L.baseUri,L.username,L.password,L.rememberMeToken,L.sessionId)}async AddDatastore(L){return this.apiCall("ADSModule/AddDatastore",{newDatastore:L})}async ApplyInstanceConfiguration(L,K,X){return this.apiCall("ADSModule/ApplyInstanceConfiguration",{InstanceID:L,Args:K,RebuildConfiguration:X})}async ApplyTemplate(L,K,X,Y,Z){return this.apiCall("ADSModule/ApplyTemplate",{InstanceID:L,TemplateID:K,NewFriendlyName:X,Secret:Y,RestartIfPreviouslyRunning:Z})}async AttachADS(L,K,X,Y,Z){return this.apiCall("ADSModule/AttachADS",{Friendly:L,IsHTTPS:K,Host:X,Port:Y,InstanceID:Z})}async CloneTemplate(L,K){return this.apiCall("ADSModule/CloneTemplate",{Id:L,NewName:K})}async ConvertToManaged(L){return this.apiCall("ADSModule/ConvertToManaged",{InstanceName:L})}async CreateDeploymentTemplate(L){return this.apiCall("ADSModule/CreateDeploymentTemplate",{Name:L})}async CreateInstance(L,K,X,Y,Z,G,H,J,Q,v,j,F,C,R,A){return this.apiCall("ADSModule/CreateInstance",{TargetADSInstance:L,NewInstanceId:K,Module:X,InstanceName:Y,FriendlyName:Z,IPBinding:G,PortNumber:H,AdminUsername:J,AdminPassword:Q,ProvisionSettings:v,AutoConfigure:j,PostCreate:F,StartOnBoot:C,DisplayImageSource:R,TargetDatastore:A})}async CreateLocalInstance(L,K){return this.apiCall("ADSModule/CreateLocalInstance",{Instance:L,PostCreate:K})}async DeleteDatastore(L){return this.apiCall("ADSModule/DeleteDatastore",{id:L})}async DeleteDeploymentTemplate(L){return this.apiCall("ADSModule/DeleteDeploymentTemplate",{Id:L})}async DeleteInstance(L){return this.apiCall("ADSModule/DeleteInstance",{InstanceName:L})}async DeleteInstanceUsers(L){return this.apiCall("ADSModule/DeleteInstanceUsers",{InstanceId:L})}async DeployTemplate(L,K,X,Y,Z,G,H,J,Q,v){return this.apiCall("ADSModule/DeployTemplate",{TemplateID:L,NewUsername:K,NewPassword:X,NewEmail:Y,RequiredTags:Z,Tag:G,FriendlyName:H,Secret:J,PostCreate:Q,ExtraProvisionSettings:v})}async DetatchTarget(L){return this.apiCall("ADSModule/DetatchTarget",{Id:L})}async ExtractEverywhere(L){return this.apiCall("ADSModule/ExtractEverywhere",{SourceArchive:L})}async GetApplicationEndpoints(L){return this.apiCall("ADSModule/GetApplicationEndpoints",{instanceId:L})}async GetDatastore(L){return this.apiCall("ADSModule/GetDatastore",{id:L})}async GetDatastoreInstances(L){return this.apiCall("ADSModule/GetDatastoreInstances",{datastoreId:L})}async GetDatastores(){return this.apiCall("ADSModule/GetDatastores",{})}async GetDeploymentTemplates(){return this.apiCall("ADSModule/GetDeploymentTemplates",{})}async GetGroup(L){return this.apiCall("ADSModule/GetGroup",{GroupId:L})}async GetInstance(L){return this.apiCall("ADSModule/GetInstance",{InstanceId:L})}async GetInstanceNetworkInfo(L){return this.apiCall("ADSModule/GetInstanceNetworkInfo",{InstanceName:L})}async GetInstanceStatuses(){return this.apiCall("ADSModule/GetInstanceStatuses",{})}async GetInstances(){return this.apiCall("ADSModule/GetInstances",{})}async GetLocalInstances(){return this.apiCall("ADSModule/GetLocalInstances",{})}async GetProvisionArguments(L){return this.apiCall("ADSModule/GetProvisionArguments",{ModuleName:L})}async GetProvisionFitness(){return this.apiCall("ADSModule/GetProvisionFitness",{})}async GetSupportedApplications(){return this.apiCall("ADSModule/GetSupportedApplications",{})}async GetTargetInfo(){return this.apiCall("ADSModule/GetTargetInfo",{})}async HandoutInstanceConfigs(L,K,X){return this.apiCall("ADSModule/HandoutInstanceConfigs",{ForModule:L,SettingNode:K,Values:X})}async ManageInstance(L){return this.apiCall("ADSModule/ManageInstance",{InstanceId:L})}async ModifyCustomFirewallRule(L,K,X,Y,Z,G){return this.apiCall("ADSModule/ModifyCustomFirewallRule",{instanceId:L,PortNumber:K,Range:X,Protocol:Y,Description:Z,Open:G})}async MoveInstanceDatastore(L,K){return this.apiCall("ADSModule/MoveInstanceDatastore",{instanceId:L,datastoreId:K})}async ReactivateLocalInstances(){return this.apiCall("ADSModule/ReactivateLocalInstances",{})}async RefreshAppCache(){return this.apiCall("ADSModule/RefreshAppCache",{})}async RefreshGroup(L){return this.apiCall("ADSModule/RefreshGroup",{GroupId:L})}async RefreshInstanceConfig(L){return this.apiCall("ADSModule/RefreshInstanceConfig",{InstanceId:L})}async RefreshRemoteConfigStores(){return this.apiCall("ADSModule/RefreshRemoteConfigStores",{})}async RegisterTarget(L,K,X,Y,Z,G){return this.apiCall("ADSModule/RegisterTarget",{controllerUrl:L,myUrl:K,username:X,password:Y,twoFactorToken:Z,friendlyName:G})}async RepairDatastore(L){return this.apiCall("ADSModule/RepairDatastore",{id:L})}async RequestDatastoreSizeCalculation(L){return this.apiCall("ADSModule/RequestDatastoreSizeCalculation",{datastoreId:L})}async RestartInstance(L){return this.apiCall("ADSModule/RestartInstance",{InstanceName:L})}async Servers(L,K){return this.apiCall("ADSModule/Servers",{id:L,REQ_RAWJSON:K})}async SetInstanceConfig(L,K,X){return this.apiCall("ADSModule/SetInstanceConfig",{InstanceName:L,SettingNode:K,Value:X})}async SetInstanceNetworkInfo(L,K){return this.apiCall("ADSModule/SetInstanceNetworkInfo",{InstanceId:L,PortMappings:K})}async SetInstanceSuspended(L,K){return this.apiCall("ADSModule/SetInstanceSuspended",{InstanceName:L,Suspended:K})}async StartAllInstances(){return this.apiCall("ADSModule/StartAllInstances",{})}async StartInstance(L){return this.apiCall("ADSModule/StartInstance",{InstanceName:L})}async StopAllInstances(){return this.apiCall("ADSModule/StopAllInstances",{})}async StopInstance(L){return this.apiCall("ADSModule/StopInstance",{InstanceName:L})}async TestADSLoginDetails(L,K,X){return this.apiCall("ADSModule/TestADSLoginDetails",{url:L,username:K,password:X})}async UpdateDatastore(L){return this.apiCall("ADSModule/UpdateDatastore",{updatedDatastore:L})}async UpdateDeploymentTemplate(L){return this.apiCall("ADSModule/UpdateDeploymentTemplate",{templateToUpdate:L})}async UpdateInstanceInfo(L,K,X,Y,Z,G,H,J,Q,v,j){return this.apiCall("ADSModule/UpdateInstanceInfo",{InstanceId:L,FriendlyName:K,Description:X,StartOnBoot:Y,Suspended:Z,ExcludeFromFirewall:G,RunInContainer:H,ContainerMemory:J,MemoryPolicy:Q,ContainerMaxCPU:v,ContainerImage:j})}async UpdateTarget(L){return this.apiCall("ADSModule/UpdateTarget",{TargetID:L})}async UpdateTargetInfo(L,K,X,Y,Z){return this.apiCall("ADSModule/UpdateTargetInfo",{Id:L,FriendlyName:K,Url:X,Description:Y,Tags:Z})}async UpgradeAllInstances(L){return this.apiCall("ADSModule/UpgradeAllInstances",{RestartRunning:L})}async UpgradeInstance(L){return this.apiCall("ADSModule/UpgradeInstance",{InstanceName:L})}}class _ extends q{constructor(L){super(L.baseUri,L.username,L.password,L.rememberMeToken,L.sessionId)}async AcknowledgeAMPUpdate(){return this.apiCall("Core/AcknowledgeAMPUpdate",{})}async AddEventTrigger(L){return this.apiCall("Core/AddEventTrigger",{triggerId:L})}async AddIntervalTrigger(L,K,X,Y,Z,G){return this.apiCall("Core/AddIntervalTrigger",{months:L,days:K,hours:X,minutes:Y,daysOfMonth:Z,description:G})}async AddTask(L,K,X){return this.apiCall("Core/AddTask",{TriggerID:L,MethodID:K,ParameterMapping:X})}async AsyncTest(){return this.apiCall("Core/AsyncTest",{})}async CancelTask(L){return this.apiCall("Core/CancelTask",{TaskId:L})}async ChangeTaskOrder(L,K,X){return this.apiCall("Core/ChangeTaskOrder",{TriggerID:L,TaskID:K,NewOrder:X})}async ChangeUserPassword(L,K,X,Y){return this.apiCall("Core/ChangeUserPassword",{Username:L,OldPassword:K,NewPassword:X,TwoFactorPIN:Y})}async ConfirmTwoFactorSetup(L,K){return this.apiCall("Core/ConfirmTwoFactorSetup",{Username:L,TwoFactorCode:K})}async CreateRole(L,K){return this.apiCall("Core/CreateRole",{Name:L,AsCommonRole:K})}async CreateTestTask(){return this.apiCall("Core/CreateTestTask",{})}async CreateUser(L){return this.apiCall("Core/CreateUser",{Username:L})}async CurrentSessionHasPermission(L){return this.apiCall("Core/CurrentSessionHasPermission",{PermissionNode:L})}async DeleteInstanceUsers(L){return this.apiCall("Core/DeleteInstanceUsers",{InstanceId:L})}async DeleteRole(L){return this.apiCall("Core/DeleteRole",{RoleId:L})}async DeleteTask(L,K){return this.apiCall("Core/DeleteTask",{TriggerID:L,TaskID:K})}async DeleteTrigger(L){return this.apiCall("Core/DeleteTrigger",{TriggerID:L})}async DeleteUser(L){return this.apiCall("Core/DeleteUser",{Username:L})}async DisableTwoFactor(L,K){return this.apiCall("Core/DisableTwoFactor",{Password:L,TwoFactorCode:K})}async DismissAllTasks(){return this.apiCall("Core/DismissAllTasks",{})}async DismissTask(L){return this.apiCall("Core/DismissTask",{TaskId:L})}async EditIntervalTrigger(L,K,X,Y,Z,G,H){return this.apiCall("Core/EditIntervalTrigger",{Id:L,months:K,days:X,hours:Y,minutes:Z,daysOfMonth:G,description:H})}async EditTask(L,K,X){return this.apiCall("Core/EditTask",{TriggerID:L,TaskID:K,ParameterMapping:X})}async EnableTwoFactor(L,K){return this.apiCall("Core/EnableTwoFactor",{Username:L,Password:K})}async EndUserSession(L){return this.apiCall("Core/EndUserSession",{Id:L})}async GetAMPRolePermissions(L){return this.apiCall("Core/GetAMPRolePermissions",{RoleId:L})}async GetAMPUserInfo(L){return this.apiCall("Core/GetAMPUserInfo",{Username:L})}async GetAMPUsersSummary(){return this.apiCall("Core/GetAMPUsersSummary",{})}async GetAPISpec(){return this.apiCall("Core/GetAPISpec",{})}async GetActiveAMPSessions(){return this.apiCall("Core/GetActiveAMPSessions",{})}async GetAllAMPUserInfo(){return this.apiCall("Core/GetAllAMPUserInfo",{})}async GetAuditLogEntries(L,K){return this.apiCall("Core/GetAuditLogEntries",{Before:L,Count:K})}async GetConfig(L){return this.apiCall("Core/GetConfig",{node:L})}async GetConfigs(L){return this.apiCall("Core/GetConfigs",{nodes:L})}async GetDiagnosticsInfo(){return this.apiCall("Core/GetDiagnosticsInfo",{})}async GetModuleInfo(){return this.apiCall("Core/GetModuleInfo",{})}async GetNewGuid(){return this.apiCall("Core/GetNewGuid",{})}async GetPermissionsSpec(){return this.apiCall("Core/GetPermissionsSpec",{})}async GetPortSummaries(){return this.apiCall("Core/GetPortSummaries",{})}async GetProvisionSpec(){return this.apiCall("Core/GetProvisionSpec",{})}async GetRemoteLoginToken(L,K){return this.apiCall("Core/GetRemoteLoginToken",{Description:L,IsTemporary:K})}async GetRole(L){return this.apiCall("Core/GetRole",{RoleId:L})}async GetRoleData(){return this.apiCall("Core/GetRoleData",{})}async GetRoleIds(){return this.apiCall("Core/GetRoleIds",{})}async GetScheduleData(){return this.apiCall("Core/GetScheduleData",{})}async GetSettingValues(L,K){return this.apiCall("Core/GetSettingValues",{SettingNode:L,WithRefresh:K})}async GetSettingsSpec(){return this.apiCall("Core/GetSettingsSpec",{})}async GetStatus(){return this.apiCall("Core/GetStatus",{})}async GetTasks(){return this.apiCall("Core/GetTasks",{})}async GetTimeIntervalTrigger(L){return this.apiCall("Core/GetTimeIntervalTrigger",{Id:L})}async GetUpdateInfo(){return this.apiCall("Core/GetUpdateInfo",{})}async GetUpdates(){return this.apiCall("Core/GetUpdates",{})}async GetUserActionsSpec(){return this.apiCall("Core/GetUserActionsSpec",{})}async GetUserInfo(L){return this.apiCall("Core/GetUserInfo",{UID:L})}async GetUserList(){return this.apiCall("Core/GetUserList",{})}async GetWebauthnChallenge(){return this.apiCall("Core/GetWebauthnChallenge",{})}async GetWebauthnCredentialIDs(L){return this.apiCall("Core/GetWebauthnCredentialIDs",{username:L})}async GetWebauthnCredentialSummaries(){return this.apiCall("Core/GetWebauthnCredentialSummaries",{})}async GetWebserverMetrics(){return this.apiCall("Core/GetWebserverMetrics",{})}async Kill(){return this.apiCall("Core/Kill",{})}async Login(L,K,X,Y){return this.apiCall("Core/Login",{username:L,password:K,token:X,rememberMe:Y})}async Logout(){return this.apiCall("Core/Logout",{})}async RefreshSettingValueList(L){return this.apiCall("Core/RefreshSettingValueList",{Node:L})}async RefreshSettingsSourceCache(){return this.apiCall("Core/RefreshSettingsSourceCache",{})}async RenameRole(L,K){return this.apiCall("Core/RenameRole",{RoleId:L,NewName:K})}async ResetUserPassword(L,K){return this.apiCall("Core/ResetUserPassword",{Username:L,NewPassword:K})}async Restart(){return this.apiCall("Core/Restart",{})}async RestartAMP(){return this.apiCall("Core/RestartAMP",{})}async Resume(){return this.apiCall("Core/Resume",{})}async RevokeWebauthnCredential(L){return this.apiCall("Core/RevokeWebauthnCredential",{ID:L})}async RunEventTriggerImmediately(L){return this.apiCall("Core/RunEventTriggerImmediately",{triggerId:L})}async SendConsoleMessage(L){return this.apiCall("Core/SendConsoleMessage",{message:L})}async SetAMPRolePermission(L,K,X){return this.apiCall("Core/SetAMPRolePermission",{RoleId:L,PermissionNode:K,Enabled:X})}async SetAMPUserRoleMembership(L,K,X){return this.apiCall("Core/SetAMPUserRoleMembership",{UserId:L,RoleId:K,IsMember:X})}async SetConfig(L,K){return this.apiCall("Core/SetConfig",{node:L,value:K})}async SetConfigs(L){return this.apiCall("Core/SetConfigs",{data:L})}async SetTriggerEnabled(L,K){return this.apiCall("Core/SetTriggerEnabled",{Id:L,Enabled:K})}async Sleep(){return this.apiCall("Core/Sleep",{})}async Start(){return this.apiCall("Core/Start",{})}async Stop(){return this.apiCall("Core/Stop",{})}async Suspend(){return this.apiCall("Core/Suspend",{})}async UpdateAMPInstance(){return this.apiCall("Core/UpdateAMPInstance",{})}async UpdateAccountInfo(L,K){return this.apiCall("Core/UpdateAccountInfo",{EmailAddress:L,TwoFactorPIN:K})}async UpdateApplication(){return this.apiCall("Core/UpdateApplication",{})}async UpdateUserInfo(L,K,X,Y,Z,G){return this.apiCall("Core/UpdateUserInfo",{Username:L,Disabled:K,PasswordExpires:X,CannotChangePassword:Y,MustChangePassword:Z,EmailAddress:G})}async UpgradeAMP(){return this.apiCall("Core/UpgradeAMP",{})}async WebauthnRegister(L,K,X){return this.apiCall("Core/WebauthnRegister",{attestationObject:L,clientDataJSON:K,description:X})}}class x extends q{constructor(L){super(L.baseUri,L.username,L.password,L.rememberMeToken,L.sessionId)}async TestSMTPSettings(){return this.apiCall("EmailSenderPlugin/TestSMTPSettings",{})}}class B extends q{constructor(L){super(L.baseUri,L.username,L.password,L.rememberMeToken,L.sessionId)}async AppendFileChunk(L,K,X){return this.apiCall("FileManagerPlugin/AppendFileChunk",{Filename:L,Data:K,Delete:X})}async CalculateFileMD5Sum(L){return this.apiCall("FileManagerPlugin/CalculateFileMD5Sum",{FilePath:L})}async ChangeExclusion(L,K,X){return this.apiCall("FileManagerPlugin/ChangeExclusion",{ModifyPath:L,AsDirectory:K,Exclude:X})}async CopyFile(L,K){return this.apiCall("FileManagerPlugin/CopyFile",{Origin:L,TargetDirectory:K})}async CreateArchive(L){return this.apiCall("FileManagerPlugin/CreateArchive",{PathToArchive:L})}async CreateDirectory(L){return this.apiCall("FileManagerPlugin/CreateDirectory",{NewPath:L})}async DownloadFileFromURL(L,K){return this.apiCall("FileManagerPlugin/DownloadFileFromURL",{Source:L,TargetDirectory:K})}async Dummy(){return this.apiCall("FileManagerPlugin/Dummy",{})}async EmptyTrash(L){return this.apiCall("FileManagerPlugin/EmptyTrash",{TrashDirectoryName:L})}async ExtractArchive(L,K){return this.apiCall("FileManagerPlugin/ExtractArchive",{ArchivePath:L,DestinationPath:K})}async GetDirectoryListing(L){return this.apiCall("FileManagerPlugin/GetDirectoryListing",{Dir:L})}async GetFileChunk(L,K,X){return this.apiCall("FileManagerPlugin/GetFileChunk",{Filename:L,Position:K,Length:X})}async ReadFileChunk(L,K,X){return this.apiCall("FileManagerPlugin/ReadFileChunk",{Filename:L,Offset:K,ChunkSize:X})}async RenameDirectory(L,K){return this.apiCall("FileManagerPlugin/RenameDirectory",{oldDirectory:L,NewDirectoryName:K})}async RenameFile(L,K){return this.apiCall("FileManagerPlugin/RenameFile",{Filename:L,NewFilename:K})}async TrashDirectory(L){return this.apiCall("FileManagerPlugin/TrashDirectory",{DirectoryName:L})}async TrashFile(L){return this.apiCall("FileManagerPlugin/TrashFile",{Filename:L})}async WriteFileChunk(L,K,X,Y){return this.apiCall("FileManagerPlugin/WriteFileChunk",{Filename:L,Data:K,Offset:X,FinalChunk:Y})}}class h extends q{constructor(L){super(L.baseUri,L.username,L.password,L.rememberMeToken,L.sessionId)}async DeleteFromS3(L){return this.apiCall("LocalFileBackupPlugin/DeleteFromS3",{BackupId:L})}async DeleteLocalBackup(L){return this.apiCall("LocalFileBackupPlugin/DeleteLocalBackup",{BackupId:L})}async DownloadFromS3(L){return this.apiCall("LocalFileBackupPlugin/DownloadFromS3",{BackupId:L})}async GetBackups(){return this.apiCall("LocalFileBackupPlugin/GetBackups",{})}async RestoreBackup(L,K){return this.apiCall("LocalFileBackupPlugin/RestoreBackup",{BackupId:L,DeleteExistingData:K})}async SetBackupSticky(L,K){return this.apiCall("LocalFileBackupPlugin/SetBackupSticky",{BackupId:L,Sticky:K})}async TakeBackup(L,K,X){return this.apiCall("LocalFileBackupPlugin/TakeBackup",{Title:L,Description:K,Sticky:X})}async UploadToS3(L){return this.apiCall("LocalFileBackupPlugin/UploadToS3",{BackupId:L})}}class E extends q{constructor(L){super(L.baseUri,L.username,L.password,L.rememberMeToken,L.sessionId)}async AcceptEULA(){return this.apiCall("MinecraftModule/AcceptEULA",{})}async AddOPEntry(L){return this.apiCall("MinecraftModule/AddOPEntry",{UserOrUUID:L})}async AddToWhitelist(L){return this.apiCall("MinecraftModule/AddToWhitelist",{UserOrUUID:L})}async BanUserByID(L){return this.apiCall("MinecraftModule/BanUserByID",{ID:L})}async BukGetCategories(){return this.apiCall("MinecraftModule/BukGetCategories",{})}async BukGetInstallUpdatePlugin(L){return this.apiCall("MinecraftModule/BukGetInstallUpdatePlugin",{pluginId:L})}async BukGetInstalledPlugins(){return this.apiCall("MinecraftModule/BukGetInstalledPlugins",{})}async BukGetPluginInfo(L){return this.apiCall("MinecraftModule/BukGetPluginInfo",{PluginId:L})}async BukGetPluginsForCategory(L,K,X){return this.apiCall("MinecraftModule/BukGetPluginsForCategory",{CategoryId:L,PageNumber:K,PageSize:X})}async BukGetPopularPlugins(){return this.apiCall("MinecraftModule/BukGetPopularPlugins",{})}async BukGetRemovePlugin(L){return this.apiCall("MinecraftModule/BukGetRemovePlugin",{PluginId:L})}async BukGetSearch(L,K,X){return this.apiCall("MinecraftModule/BukGetSearch",{Query:L,PageNumber:K,PageSize:X})}async ClearInventoryByID(L){return this.apiCall("MinecraftModule/ClearInventoryByID",{ID:L})}async GetFailureReason(){return this.apiCall("MinecraftModule/GetFailureReason",{})}async GetHeadByUUID(L){return this.apiCall("MinecraftModule/GetHeadByUUID",{id:L})}async GetOPWhitelist(){return this.apiCall("MinecraftModule/GetOPWhitelist",{})}async GetWhitelist(){return this.apiCall("MinecraftModule/GetWhitelist",{})}async KickUserByID(L){return this.apiCall("MinecraftModule/KickUserByID",{ID:L})}async KillByID(L){return this.apiCall("MinecraftModule/KillByID",{ID:L})}async LoadOPList(){return this.apiCall("MinecraftModule/LoadOPList",{})}async RemoveOPEntry(L){return this.apiCall("MinecraftModule/RemoveOPEntry",{UserOrUUID:L})}async RemoveWhitelistEntry(L){return this.apiCall("MinecraftModule/RemoveWhitelistEntry",{UserOrUUID:L})}async SmiteByID(L){return this.apiCall("MinecraftModule/SmiteByID",{ID:L})}}class O extends q{constructor(L){super(L.baseUri,L.username,L.password,L.rememberMeToken,L.sessionId)}async Dummy(){return this.apiCall("RCONPlugin/Dummy",{})}}class b extends q{constructor(L){super(L.baseUri,L.username,L.password,L.rememberMeToken,L.sessionId)}async CancelSteamGuard(){return this.apiCall("steamcmdplugin/CancelSteamGuard",{})}async SteamGuardCode(L){return this.apiCall("steamcmdplugin/SteamGuardCode",{code:L})}async SteamUsernamePassword(L,K){return this.apiCall("steamcmdplugin/SteamUsernamePassword",{username:L,password:K})}}class V extends q{Core=new _(this);EmailSenderPlugin=new x(this);FileManagerPlugin=new B(this);LocalFileBackupPlugin=new h(this);constructor(L,K="",X="",Y="",Z=""){super(L,K,X,Y,Z)}async APILogin(){const L=await super.APILogin();if(L!=null&&L.hasOwnProperty("success")&&L.success===!0)this.rememberMeToken=L.rememberMeToken,this.sessionId=L.sessionID,this.Core.sessionId=this.sessionId,this.Core.rememberMeToken=this.rememberMeToken,this.EmailSenderPlugin.sessionId=this.sessionId,this.EmailSenderPlugin.rememberMeToken=this.rememberMeToken,this.FileManagerPlugin.sessionId=this.sessionId,this.FileManagerPlugin.rememberMeToken=this.rememberMeToken,this.LocalFileBackupPlugin.sessionId=this.sessionId,this.LocalFileBackupPlugin.rememberMeToken=this.rememberMeToken;return L}}class f extends V{RCONPlugin=new O(this);steamcmdplugin=new b(this);constructor(L,K="",X="",Y="",Z=""){super(L,K,X,Y,Z)}async APILogin(){const L=await super.APILogin();if(L!=null&&L.hasOwnProperty("success")&&L.success===!0)this.rememberMeToken=L.rememberMeToken,this.sessionId=L.sessionID,this.RCONPlugin.sessionId=this.sessionId,this.RCONPlugin.rememberMeToken=this.rememberMeToken,this.steamcmdplugin.sessionId=this.sessionId,this.steamcmdplugin.rememberMeToken=this.rememberMeToken;return L}}class k extends V{MinecraftModule=new E(this);constructor(L,K="",X="",Y="",Z=""){super(L,K,X,Y,Z)}async APILogin(){const L=await super.APILogin();if(L!=null&&L.hasOwnProperty("success")&&L.success===!0)this.rememberMeToken=L.rememberMeToken,this.sessionId=L.sessionID,this.MinecraftModule.sessionId=this.sessionId,this.MinecraftModule.rememberMeToken=this.rememberMeToken;return L}}class y extends V{ADSModule=new z(this);constructor(L,K="",X="",Y="",Z=""){super(L,K,X,Y,Z)}async APILogin(){const L=await super.APILogin();if(L!=null&&L.hasOwnProperty("success")&&L.success===!0)this.rememberMeToken=L.rememberMeToken,this.sessionId=L.sessionID,this.ADSModule.sessionId=this.sessionId,this.ADSModule.rememberMeToken=this.rememberMeToken;return L}async InstanceLogin(L,K){const X={username:this.username,password:this.password,token:"",rememberMe:!0},Y=await this.apiCall("ADSModule/Servers/"+L+"/API/Core/Login",X);if(Y.success===!0){const Z=this.baseUri+"API/ADSModule/Servers/"+L,G=Y.rememberMeToken,H=Y.sessionID;let J;switch(K){case"ADS":J=new y(Z,this.username,"",G,H);break;case"GenericModule":J=new f(Z,this.username,"",G,H);break;case"Minecraft":J=new k(Z,this.username,"",G,H);break;default:J=new V(Z,this.username,"",G,H);break}return await J.APILogin(),J}else return}}var U=function(L){switch(L){case W.Undefined:return"Undefined";case W.Stopped:return"Stopped";case W.PreStart:return"PreStart";case W.Configuring:return"Configuring";case W.Starting:return"Starting";case W.Ready:return"Ready";case W.Restarting:return"Restarting";case W.Stopping:return"Stopping";case W.PreparingForSleep:return"PreparingForSleep";case W.Sleeping:return"Sleeping";case W.Waiting:return"Waiting";case W.Installing:return"Installing";case W.Updating:return"Updating";case W.AwaitingUserInput:return"AwaitingUserInput";case W.Failed:return"Failed";case W.Suspended:return"Suspended";case W.Maintainence:return"Maintainence";case W.Indeterminate:return"Indeterminate";default:return"Unknown"}},W;(function($){$[$["Undefined"]=-1]="Undefined";$[$["Stopped"]=0]="Stopped";$[$["PreStart"]=5]="PreStart";$[$["Configuring"]=7]="Configuring";$[$["Starting"]=10]="Starting";$[$["Ready"]=20]="Ready";$[$["Restarting"]=30]="Restarting";$[$["Stopping"]=40]="Stopping";$[$["PreparingForSleep"]=45]="PreparingForSleep";$[$["Sleeping"]=50]="Sleeping";$[$["Waiting"]=60]="Waiting";$[$["Installing"]=70]="Installing";$[$["Updating"]=75]="Updating";$[$["AwaitingUserInput"]=80]="AwaitingUserInput";$[$["Failed"]=100]="Failed";$[$["Suspended"]=200]="Suspended";$[$["Maintainence"]=250]="Maintainence";$[$["Indeterminate"]=999]="Indeterminate"})(W||(W={}));var LL=q;export{b as steamcmdplugin,U as lookupState,LL as default,W as State,O as RCONPlugin,E as MinecraftModule,k as Minecraft,h as LocalFileBackupPlugin,f as GenericModule,B as FileManagerPlugin,x as EmailSenderPlugin,_ as Core,V as CommonAPI,q as AMPAPI,z as ADSModule,y as ADS};
